import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { CacheFirst, StaleWhileRevalidate } from "workbox-strategies";
import { clientsClaim, setCacheNameDetails } from "workbox-core";

// Define custom cache names
setCacheNameDetails({
  prefix: "drive-alert",
  suffix: "v1",
  precache: "precache",
  runtime: "runtime-cache",
});

// Immediately claim clients after activation
self.addEventListener("activate", (event) => {
  event.waitUntil(self.clients.claim());
});

// Precache assets generated by Workbox
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache-First Strategy for Static Assets (HTML, JS, CSS, Images)
registerRoute(
  ({ request }) =>
    ["document", "script", "style", "image"].includes(request.destination),
  new CacheFirst({
    cacheName: "drive-alert-static-cache",
  })
);

// Stale-While-Revalidate for API requests
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.startsWith("/api"),
  new StaleWhileRevalidate({
    cacheName: "drive-alert-api-cache",
  })
);

// Clean up old caches on activation
self.addEventListener("activate", (event) => {
  const currentCaches = ["drive-alert-static-cache", "drive-alert-api-cache"];
  event.waitUntil(
    caches.keys().then((cacheNames) =>
      Promise.all(
        cacheNames.map((cacheName) => {
          if (!currentCaches.includes(cacheName)) {
            console.log(`ðŸ—‘ Deleting old cache: ${cacheName}`);
            return caches.delete(cacheName);
          }
        })
      )
    )
  );
});

// Force update the service worker immediately when a new version is available
self.addEventListener("install", () => {
  self.skipWaiting();
});
